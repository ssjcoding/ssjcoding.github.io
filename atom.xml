<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>破晓狂客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-18T05:20:44.806Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>tony</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/11/18/hello-world/"/>
    <id>http://yoursite.com/2018/11/18/hello-world/</id>
    <published>2018-11-18T05:20:44.805Z</published>
    <updated>2018-11-18T05:20:44.806Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="后端" scheme="http://yoursite.com/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>折半插入排序</title>
    <link href="http://yoursite.com/2017/11/06/%E6%8A%98%E5%8D%8A%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>http://yoursite.com/2017/11/06/折半插入排序/</id>
    <published>2017-11-06T06:11:13.000Z</published>
    <updated>2018-11-18T05:33:38.019Z</updated>
    
    <content type="html"><![CDATA[<p><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script></p><p>#【基础算法】– 折半插入排序</p><hr><p><em>&copy;本文为博主原创文章，未经博主允许不得转载。</em></p><hr><p>##0001 算法描述</p><blockquote><p>折半插入排序是直接插入排序的一种优化，在直接插入排序中待排序的元素需要与有序数列的每个元素从后往前逐个进行比较，直接插入排序对基本有序数列具有很高的排序效率，但是当乱序情况下，其比较次数会很多。折半插入排序在直接排序的基础上在位置查找部分采用折半（二分查找）算法进行插入位置的确定，进而节省查找时间。</p></blockquote><p>##0010 算法分析</p><blockquote><ul><li>最差时间复杂度：\(O(n^2)\)</li><li>最好时间复杂度：\(O(nlogn)\)</li><li>平均时间复杂度：\(O(n^2)\)</li><li>空间复杂度：　　\(O(1)\)</li><li>稳定性：　　　　稳定</li></ul></blockquote><p>##0011 算法伪码</p><pre><code>INSERTION-SORT(A)for j=2 to A.length    key = A[j]    //Insert A[j] into the sorted sequence A[1..j-1].    left = 0    right = i-1    while left &lt;= right // 采用二分法定位新牌的位置        mid = (left+right)/2        if A[mid] &gt; key            right = mid - 1        else             left = mid + 1    for j=i-1 to left    // 将欲插入新牌位置右边的牌整体向右移动一个单位        A[j+1] = A[j]    A[left] = key        // 将抓到的牌插入手牌</code></pre><p>##0100 算法步骤</p><blockquote><ul><li>缓存当前要排序的元素的值，以便找到正确的位置进行插入；</li><li>计算 0 ~ i-1 的中间点，用 i 索引处的元素与中间值进行比较，如果 i 索引处的元素大，说明要插入的这个元素应该在中间值和刚加入i索引之间，反之，就是在刚开始的位置 到中间值的位置，这样很简单的完成了折半；</li><li>在相应的半个范围里面找插入的位置时，不断的用（1）步骤缩小范围，不停的折半，范围依次缩小为 1/2  1/4  1/8 …….快速的确定出第i个元素要插在什么地方；</li><li>确定位置之后，将整个序列后移，并将元素插入到相应位置。</li></ul></blockquote><p>##0101 java实现<br>    /**</p><pre><code> * 折半插入排序 * * @author tonysu, * @version 1.0v. * @Create 2017/11/12 下午9:13, */public class BinaryInsertSort{    /**     * 排序函数     *     * @param data  输入数组     * @param order 排序方式：     *              true为升序     *              false为降序     * @return     */    public int[] sort(int[] data, boolean order){        if(data.length == 0 || data == null){            throw new NullPointerException(&quot;数组为空&quot;);        }        if(data.length == 1){            return data;        }        for(int i=1; i&lt;data.length; i++){            int key = data[i];            int left = 0;            int right = i - 1;            if(order){                while(left &lt;= right){                    int mid = (left+right)/2;                    if(data[mid] &gt; key){                        right = mid - 1;                    }else{                        left = mid + 1;                    }                }            }else{                while(left &lt;= right){                    int mid = (left+right)/2;                    if(data[mid] &lt; key){                        right = mid - 1;                    }else{                        left = mid + 1;                    }                }            }            for(int j=i-1; j&gt;=left; j--){                data[j+1] = data[j];            }            data[left] = key;        }        return data;    }}</code></pre><p>##0110 python实现</p><pre><code>class InsertSort(object):    &quot;&quot;&quot;折半插入排序类&quot;&quot;&quot;    def __init__(self):        super(InsertSort, self).__init__()    def sort(self, datas, order):        &quot;&quot;&quot;对传入的数值数组datas进行折半插入排序.          Args:            datas: 待排序数值数组 e.g. [12, 3, 24, 11, 34, 33, 42, 9, 4]            order: 排序顺序 e.g. True为升序， False为降序          Returns:            datas: 排好序的数值数组.          &quot;&quot;&quot;        for i in range(1, len(datas)):            left = 0            right = i-1            key = datas[i]            if order:                while left &lt;= right:                    mid = (left + right)/2                    if datas[mid] &gt; key:                        right = mid - 1                    else:                        left = mid + 1            else:                while left &lt;= right:                    mid = (left + right)/2                    if datas[mid] &lt; key:                        right = mid - 1                    else:                        left = mid + 1            for j in range(i-1, left-1, -1):                datas[j+1] = datas[j]            datas[left] = key        return datasdef main():    data = [12, 3, 24, 11, 34, 33, 42, 9, 4]    print data    order = True    insert_sort = InsertSort()    result = insert_sort.sort(data, order)    print resultif __name__ == &apos;__main__&apos;:    main()</code></pre><p>##0111 算法优缺点</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><blockquote><p>相对于直接插入排序比较次数少，查找速度快，平均性能好；</p></blockquote><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><blockquote><p>要求待查表为有序表；</p><p>插入删除困难：因为折半查找法要求待查表为有序表，所以在插入的时候你就不能随便插入了。你必须找到待插入的元素在表中的位置才可以插入，所以插入的时候比较麻烦。</p></blockquote><p>##1111 总结</p><blockquote><p>当n较大时，二分插入排序的比较次数比直接插入排序的最差情况好得多，但比直接插入排序的最好情况要差，所当以元素初始序列已经接近升序时，直接插入排序比二分插入排序比较次数少。二分插入排序元素移动次数与直接插入排序相同，依赖于元素初始序列。</p><p>如果比较操作的代价比交换操作大的话可以采用二分插入排序。</p></blockquote><hr><p>参考博客</p><blockquote><p><a href="http://blog.csdn.net/diaorenxiang/article/details/22984299" title="插入排序及优化" target="_blank" rel="noopener">插入排序及优化</a></p><p><a href="http://blog.csdn.net/jlqcloud/article/details/46939265" title="排序算法之二分法（折半）插入排序算法" target="_blank" rel="noopener">排序算法之二分法（折半）插入排序算法</a></p><p><a href="https://segmentfault.com/a/1190000004994003#articleHeader10" title="排序算法总结" target="_blank" rel="noopener">排序算法总结</a></p><p><a href="https://www.cnblogs.com/eniac12/p/5329396.html#s31" title="常用排序算法总结(一)" target="_blank" rel="noopener">常用排序算法总结(一)</a></p></blockquote><p>欢迎扫码关注我的公众号：</p><p> <img src="/Users/tony/Documents/private/资料/博客/qrcode_for_gh_b4adf738f2a2_430.jpg" width="100" height="100" alt="破晓狂客" align="left"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;#【基础算法】– 折半插入排序&lt;/p&gt;
      
    
    </summary>
    
      <category term="基础算法" scheme="http://yoursite.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
</feed>
